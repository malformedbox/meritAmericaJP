package com.meritamerica.assignment7.model.services;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.meritamerica.assignment7.model.AuthRequest;
import com.meritamerica.assignment7.model.AuthResponse;
import com.meritamerica.assignment7.model.Role;
import com.meritamerica.assignment7.model.User;
import com.meritamerica.assignment7.model.enums.RoleEnum;
import com.meritamerica.assignment7.model.security.jwt.JwtUtils;
import com.meritamerica.assignment7.model.security.service.UserDetailsImpl;
import com.meritamerica.assignment7.model.security.service.UserDetailsServiceImpl;
import com.meritamerica.assignment7.model.exceptions.ApiNotFoundException;
import com.meritamerica.assignment7.model.repository.RoleRepository;
import com.meritamerica.assignment7.model.repository.UserRepository;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;

import DTO.JwtResponse;
import DTO.LoginRequest;
import DTO.SignupRequest;

@Service
public class AuthService {
	@Autowired
	AuthenticationManager authenticationManager;
	
	@Autowired
	UserRepository userRepository;
	
	@Autowired
	RoleRepository roleRepository;
	
	@Autowired
	PasswordEncoder passwordEncoder;
	
	@Autowired
	JwtUtils jwtUtil;
	
	private UserDetailsServiceImpl userDetailsService;
	
	public ResponseEntity<?> authenticateUser (AuthRequest authRequest) throws Exception{
			/*Authentication auth = authenticationManager.authenticate(
					new UsernamePasswordAuthenticationToken(loginRequest.getEmail(), loginRequest.getPassword()));
			
			SecurityContextHolder.getContext().setAuthentication(auth);
			String jwt = jwtUtil.generateJwtToken(auth);
			
			UserDetailsImpl userDetails = (UserDetailsImpl) auth.getPrincipal();
			List<String> roles = userDetails.getAuthorities().stream().map(item -> item.getAuthority()).collect(Collectors.toList());
			
			return ResponseEntity.ok( new JwtResponse(jwt, userDetails.getId(), userDetails.getUsername(), roles));*/
		try {
			authenticationManager.authenticate(
					new UsernamePasswordAuthenticationToken(authRequest.getUsername(), authRequest.getPassword()));
		} catch (BadCredentialsException e) {
			throw new Exception("Incorrect username or password", e);
		}
		final UserDetails userDetails = userDetailsService.loadUserByUsername(authRequest.getUsername());
		final String jwt = jwtUtil.generateToken(userDetails);
		return ResponseEntity.ok(new AuthResponse(jwt));
	}

	public ResponseEntity<?> createUser(SignupRequest signupRequest) {
		if(userRepository.existsByUsername(signupRequest.getUsername())) {
			return ResponseEntity
					.badRequest()
					.body(String.format("Username %s already exists", signupRequest.getUsername()));
		}
		
		User user = new User(signupRequest.getUsername(), passwordEncoder.encode(signupRequest.getPassword()));
		Set<String> strRoles = signupRequest.getRoles();
		Set<Role> roles = new HashSet<>();
		
		if(strRoles == null) {
			throw new ApiNotFoundException("Role is null");
		} else {
			strRoles.forEach(role -> {
				switch (role.toLowerCase()) {
					case "admin":
						Role adminRole = roleRepository.findByName(RoleEnum.ROLE_ADMIN).orElseThrow(() -> new ApiNotFoundException("Admin role not found"));
					case "user":
						Role userRole = roleRepository.findByName(RoleEnum.ROLE_USER).orElseThrow(() -> new ApiNotFoundException("User role not found"));
					default:
						throw new ApiNotFoundException("Role not found");
				}
			});
		}
		user.setRoles(roles);
		userRepository.save(user);
		return new ResponseEntity<>("User created", HttpStatus.CREATED);
	}

}
