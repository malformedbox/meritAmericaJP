package com.meritamerica.assignment7.model.security;

import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.meritamerica.assignment7.model.security.jwt.AuthTokenFilter;
import com.meritamerica.assignment7.model.security.service.UserDetailsServiceImpl;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity( prePostEnabled = true )
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	UserDetailsServiceImpl userDetailService;
	
	@Bean
	public AuthTokenFilter authenticationJwtTokenFilter() { return new AuthTokenFilter();}
	
	@Override
	public void configure(AuthenticationManagerBuilder auth) throws Exception {
		//auth.userDetailsService(userDetailService).passwordEncoder(passwordEncoder());
		auth.inMemoryAuthentication()
			.withUser("user").password(passwordEncoder().encode("upass")).roles("USER")
			.and()
			.withUser("admin").password(passwordEncoder().encode("apass")).roles("ADMIN");
	}
	
	@Bean
	@Override
	public AuthenticationManager authenticationManagerBean() throws Exception {
		return super.authenticationManagerBean();
	}
	
	@Bean
	public PasswordEncoder passwordEncoder() { 
		//return new BCryptPasswordEncoder();
		return NoOpPasswordEncoder.getInstance();
	}
	
	@Override
	protected void configure(HttpSecurity http) throws Exception{
    	http.cors().and().csrf().disable()
    		.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()
    		.authorizeRequests()
    		.antMatchers("/admin/**").hasRole("ADMIN")
    		/*
    		.antMatchers("/Me/**").authenticated()
    		.antMatchers("/AccountHolders/**").hasRole("ADMIN")
    		.antMatchers("/CDOfferings").hasRole("ADMIN")
    		.antMatchers("/CDOfferings").authenticated()
    		.antMatchers("/Authenticate/**").hasRole("ADMIN")
    		.antMatchers("/Authenticate").permitAll()*/
    		.antMatchers("/login*").permitAll()
    		.antMatchers("/h2-console/**").permitAll()
    		.anyRequest().authenticated();
    		//.and().formLogin();

    	
	 	http.headers().frameOptions().disable();
	}
}
