package com.meritamerica.assignment7.model.services;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.meritamerica.assignment7.model.User;
import com.meritamerica.assignment7.model.security.jwt.JwtUtils;
import com.meritamerica.assignment7.model.security.service.UserDetailsImpl;
import com.meritamerica.assignment7.model.repository.RoleRepository;
import com.meritamerica.assignment7.model.repository.UserRepository;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

import DTO.JwtResponse;
import DTO.LoginRequest;
import DTO.SignupRequest;

@Service
public class AuthService {
	@Autowired
	AuthenticationManager authenticationManager;
	
	@Autowired
	UserRepository userRepository;
	
	@Autowired
	RoleRepository roleRepository;
	
	@Autowired
	PasswordEncoder passwordEncoder;
	
	@Autowired
	JwtUtils jwtUtil;
	
	public ResponseEntity<?> createUser(SignupRequest signupRequest) {
		if(userRepository.existsByUsername(signupRequest.getUsername())) {
			return ResponseEntity
					.badRequest()
					.body(String.format("Username %s already exists", signupRequest.getUsername()));
		}
		
		User user = new User(signupRequest.getRole(),signupRequest.getUsername(), passwordEncoder.encode(signupRequest.getPassword()));
		
		userRepository.save(user);
		return new ResponseEntity<>(user, HttpStatus.CREATED);
	}
	
	public ResponseEntity<?> authenticateUser (LoginRequest loginRequest){
			Authentication auth = authenticationManager.authenticate(
					new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));
			
			SecurityContextHolder.getContext().setAuthentication(auth);
			String jwt = jwtUtil.generateJwtToken(auth);
			
			UserDetailsImpl userDetails = (UserDetailsImpl) auth.getPrincipal();
			List<String> roles = userDetails.getAuthorities().stream().map(item -> item.getAuthority()).collect(Collectors.toList());
			
			return ResponseEntity.ok( new JwtResponse(jwt, userDetails.getId(), userDetails.getUsername(), roles));	
	}
}
